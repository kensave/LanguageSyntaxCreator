{
  "Keywords": {
    "Await": "await",
    "Break": "break",
    "Boolean": "bool",
    "Catch": "catch",
    "Continue": "catch",
    "Class": "class",
    "Do": "do",
    "Else": "else",
    "Enum": "enum",
    "Extends": "extends",
    "False": "false",
    "For": "for",
    "Foreach": "foreach",
    "Finally": "finally",
    "If": "if",
    "Implements": "implements",
    "Infer": "var",
    "Interface": "interface",
    "Namespace": "namespace",
    "New": "new",
    "Operator": "operator",
    "Params": "params",
    "Return": "return",
    "Switch": "switch",
    "Throw": "throw",
    "True": "true",
    "Try": "try",
    "Using": "using",
    "Void": "void",
    "While": "while",
    "Yield": "yield"
  },
  "CustomKeywords": {
    "Int": "",
    "Identifier": "",
    "Float": "",
    "QuotedString": ""
  },
  "SpecialChars": {
    "Ampersand": "&",
    "Asterix": "*",
    "Carat": "^",
    "CloseParenth": ")",
    "Comma": ",",
    "Colon": ",",
    "Compare": "==",
    "DeRef": "->",
    "Dot": ".",
    "Equals": "=",
    "GreaterThan": ">",
    "HashTag": "#",
    "LBracket": "{",
    "LessThan": "<",
    "LSquareBracket": "[",
    "Minus": "-",
    "NotCompare": "!=",
    "OpenParenth": "(",
    "Or": "||",
    "Plus": "+",
    "RBracket": "}",
    "RSquareBracket": "]",
    "SemiColon": ";",
    "Slash": "/"
  },
  //    Syntax Definition
  //  Every Language defines its own Syntax.
  // We are going to represent each Lenguage syntax following this standart:
  // {value} We are accesing a value either in the SpecialChars, Keywords or the Syntax it self.
  // *Means that it's nullable or the it doesn't have to exist.
  // <{value}> or <{value},{value2}> or <{value},....,{valueN}> Represents a sequence of elements.
  // ^ Ignores previous untill it appears
  // (anything) Used to group elements, because in some case the entire Grop may be
  "Syntax": {
    "Document": "<{UsingStatement}>* <({NamespaceDeclaration}|{TypeDeclaration})>*",
    "UsingStatement": "{Using} <{Identifier},({Dot}|{Asterix})*> {SemiColon}",
    "NamespaceDeclaration": "{Namespace} <{Identifier},{Dot}*> {LBracket} {RBracket}",
    "TypeDeclaration": "{Identifier}* {TopLevelType} {Identifier} {LBracket} ^{RBracket}",
    "TopLevelType": "({Class}|{Interface}|{Enum})"
  }
}
